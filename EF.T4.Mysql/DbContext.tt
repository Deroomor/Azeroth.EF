<#@ template language="C#" hostspecific="True" debug="true"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Configuration" #>

<#@ assembly name="$(SolutionDir)\packages\MySql.Data.6.9.12\lib\net45\MySql.Data.dll"  #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ output extension=".cs" #>
using System;
using System.Data.Entity;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
namespace EF.T4.Mysql
{

<#
    string nameClass= System.IO.Path.GetFileNameWithoutExtension(this.Host.TemplateFile);
    this.WriteLine(string.Format("{0}public partial class {1} : System.Data.Entity.DbContext",new String(' ',2),nameClass));
    this.WriteLine(new String(' ',2)+"{");
    this.WriteLine(string.Format("{0}public {1}() : base(\"name=EquitySaas\")",new String(' ',8),nameClass));
 #>
        {
        }    
<#
	//System.Diagnostics.Debugger.Launch();//---进入调试
    
     
	      string configPath=Host.ResolveAssemblyReference("$(ProjectDir)")+"app.config";
	  var configPathMap=new System.Configuration.ExeConfigurationFileMap(){ExeConfigFilename=configPath};
    var appConfig=System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configPathMap, System.Configuration.ConfigurationUserLevel.None);
    var connSection= appConfig.GetSection("connectionStrings") as System.Configuration.ConnectionStringsSection;  

	string cnnstr= connSection.ConnectionStrings["EquitySaas"].ConnectionString;
				string catalog=cnnstr.Split(new char[] { ';','='},StringSplitOptions.RemoveEmptyEntries).Select(x=>x.ToLower()).SkipWhile(x=>x!= "initial catalog").ToArray()[1];
				string cmdstr=string.Format(@"select *
                                                            from INFORMATION_SCHEMA.TABLES
                                                            where TABLE_TYPE='BASE TABLE' and table_schema='{0}'", catalog);
				Dictionary<string,string> lstTableName=new Dictionary<string,string>();
	         using(var cnn=new MySql.Data.MySqlClient.MySqlConnection(cnnstr))
				{
        
								cnn.Open();
								var cmd2= cnn.CreateCommand();
								cmd2.CommandText=cmdstr;
		using(var reader=cmd2.ExecuteReader())
								{
while(reader.Read())
	lstTableName.Add(reader["TABLE_NAME"].ToString(),reader["TABLE_COMMENT"].ToString());
}

	cmd2.Dispose();
			foreach(KeyValuePair<string,string> kv in lstTableName)
				{
            
							
  this.WriteLine(string.Format("{0}/// <summary>",new String(' ',4)));
												this.WriteLine(string.Format("{0}/// {1}",new String(' ',4),kv.Value.Replace("\r\n",string.Empty).Replace("\r",string.Empty).Replace("\n",string.Empty)));
			  this.WriteLine(string.Format("{0}/// <summary>",new String(' ',4)));
            string tmp=string.Join("_", kv.Key.Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries).Select(x => string.Concat(x.Select((a, index) => index == 0 ? char.ToUpper(a) : a))));
            if(tmp=="Target")
                tmp="target";
            this.WriteLine(string.Format("{1}public virtual DbSet<{0}> {0} {2}",tmp,new String(' ',4),"{ get; set; }"));
    
			//foreach(string name in lstEnum)
    //{
        //this.WriteLine(string.Empty);
        //this.WriteLine(string.Format("{0}public partial enum {1}",new String(' ',8),name));
        //this.WriteLine(new String(' ',8)+"{");
        //this.WriteLine(new String(' ',8)+"");
        //this.WriteLine(new String(' ',8)+"}");
    //}




}

}
			






 #>
    }
}
